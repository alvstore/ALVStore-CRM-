datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "debian-openssl-3.0.x", "linux-arm64-openssl-1.1.x", "rhel-openssl-3.0.x"]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          String    @default("USER")
  status        String    @default("active")
  company       String?
  contact       String?
  country       String?
  currentPlan   String?
  billing       String?
  avatarColor   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  invoices      Invoice[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Invoice {
  id            String   @id @default(cuid())
  invoiceNumber String   @unique
  issuedDate    DateTime
  dueDate       DateTime
  address       String
  company       String
  companyEmail  String
  country       String
  contact       String
  name          String
  service       String
  total         Float
  avatar        String?
  avatarColor   String?
  status        String
  balance       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String?
  user          User?    @relation(fields: [userId], references: [id])
}

model Customer {
  id                      String    @id @default(cuid())
  firstName               String?
  lastName                String?
  fullName                String?
  type                    String?   @default("individual")
  taxId                   String?
  website                 String?
  industry                String?
  source                  String?
  notes                   String?
  phone                   String?
  company                 String?
  email                   String?   @unique
  status                  String    @default("active")
  creditLimit             Float?
  paymentTerms            Int?
  taxExempt               Boolean   @default(false)
  taxCertificate          String?
  assignedTo              String?
  tags                    String?   // Storing as comma-separated values
  customFields            String?   // Storing as JSON string
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  createdBy               String
  lastActivity            DateTime?
  
  // Relations
  contacts                ContactPerson[]
  addresses               Address[]
  activities              CustomerActivity[]
  communicationPreferences CommunicationPreferences?
}

model ContactPerson {
  id          String    @id @default(cuid())
  firstName   String
  lastName    String
  email       String
  phone       String
  position    String?
  isPrimary   Boolean   @default(false)
  notes       String?
  department  String?
  avatar      String?
  status      String?   @default("active")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  customer    Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId  String
}

model Address {
  id          String    @id @default(cuid())
  type        String    // billing, shipping, both
  street      String
  street2     String?
  city        String
  state       String
  postalCode  String
  country     String
  isDefault   Boolean   @default(false)
  addressType String?   // home, work, billing, shipping
  notes       String?
  latitude    Float?
  longitude   Float?
  customer    Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model CustomerActivity {
  id          String    @id @default(cuid())
  type        String    // note, email, call, meeting, other
  title       String
  description String?
  date        DateTime  @default(now())
  userId      String
  userName    String
  userAvatar  String?
  metadata    String?   // Storing as JSON string
  customer    Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model CommunicationPreferences {
  id                String    @id @default(cuid())
  email             Boolean   @default(true)
  sms               Boolean   @default(false)
  phone             Boolean   @default(false)
  preferred         String    @default("email")
  doNotDisturb      Boolean   @default(false)
  doNotDisturbUntil DateTime?
  marketingEmails   Boolean   @default(false)
  newsletter        Boolean   @default(false)
  customer          Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId        String    @unique
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}
